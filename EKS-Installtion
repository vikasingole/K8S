<=====A Complete Guide to Setup Kubernetes Cluster on EC2 Instance Using Kops=====>

Setup Kubernetes Cluster on EC2 Instance Using Kops

Step 1: Create an EC2 Instance <--- this only driver instance because of this our cluster as well as nodes will create
        ( This instance is just for "setup cluster", this is not our 'master' as well as 'worker' node. select 'ubuntu ami', can select 't2 micro instance type' 
        select 'security group' allow all ports )
  
Step 2: Install AWSCLI
        (AWSCLI has already configured in AWS so that we don't need to configure the AWSCLI)
        
Step 3: Install Kubectl
        
        https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html   <--- it is the url where we can download the Kubectl step by step
        
        ===> To install or update kubectl <===
        
        Determine whether you already have kubectl installed on your device.
        
        kubectl version --short --client1

        ===> Install or update kubectl on Linux operating systems <===

        we are installing 'old version of kubectl' ===> Kubernetes 1.22
      
        A===> Download the kubectl binary for your cluster's Kubernetes version from Amazon S3 using the command for your device's hardware platform.
              The first link for each version is for amd64 and the second link is for arm64
        
              curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.17/2023-03-17/bin/linux/amd64/kubectl
      
        B===> 1) (Optional) Verify the downloaded binary with the SHA-256 checksum for your binary.

              Download the SHA-256 checksum for your cluster's Kubernetes version from Amazon S3 using the command for your device's hardware platform.
              The first link for each version is for amd64 and the second link is for arm64.
        
              curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.17/2023-03-17/bin/linux/amd64/kubectl.sha256
         
              2) Check the SHA-256 checksum for your downloaded binary with one of the following commands.         
        
              sha256sum -c kubectl.sha256
   
              openssl sha1 -sha256 kubectl
 
        C===> Apply execute permissions to the binary.
        
              chmod +x ./kubectl

        D===> Copy the binary to a folder in your PATH. If you have already installed a version of kubectl, then we recommend creating a $HOME/bin/kubectl
              and ensuring that $HOME/bin comes first in your $PATH.

              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
        
        E===> (Optional) Add the $HOME/bin path to your shell initialization file so that it is configured when you open a shell.
        
              echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc

        F===> After you install kubectl, you can verify its version.
 
              kubectl version --short --client

Step 4: Install Eksctl
        
        https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html      <--- it is the url where we can download the Kubectl step by step

        Prerequisite===>
        
        The kubectl command line tool is installed on your device or AWS CloudShell.
 
        <=== To install or update eksctl ===>

        Determine whether you already have eksctl installed on your device.

        eksctl version

        <=== To install or update eksctl on Linux ===>

        A===> Download and extract the latest release of eksctl with the following command.

              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

        B===> Move the extracted binary to /usr/local/bin.

              sudo mv /tmp/eksctl /usr/local/bin
       
        C===> Test that your installation was successful with the following command.

              eksctl version        


Step 4: Create IAM Role (where we are making connection between EC2 to EKS or Administration Full Access) (If we are giving Full Admin Access so automatically EKS will assign) without root or user credentials
 
        EC2 <------> EKS or Administration Full Access      
   
        Actions---Security---Modify-IAM-Role---Select-Our-Role        

        We are creating cluster on instance using commands not from EKS-Service of AWS (EKS-Service provide cluster directly)
                                       
        EKS-cluster Commands ===> we can put individual commands also
         
        eksctl create cluster
        --name my-cluster \
        --version 1.22 \
        --region eu-central-1 \                                <-------is region me hamara cluster banega
        --nodegroup-name linux-nodes \
        --node-type t2.micro \
        --nodes 5
        
        creating cluster atleast 20 to 30 min required due to its configuration from cloudformation  

Step 5: Installing aws-iam-authenticator

       ===> To install aws-iam-authenticator on Linux <===

       A===> Download the aws-iam-authenticator binary from GitHub for your hardware platform. The first command downloads the amd64 release.
             The second command downloads the arm64 release.
     
             curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64

      
       B===> (Optional) Verify the downloaded binary with the SHA-256 checksum for the file.
           
             1) Download the SHA-256 checksum file. 
             
             curl -Lo aws-iam-authenticator.txt https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/authenticator_0.5.9_checksums.txt
 
             2) View the checksum for the authenticator binary that you downloaded. The first command returns the amd64 checksum. The second command returns the arm64 checksum.

             awk '/aws-iam-authenticator_0.5.9_linux_amd64/ {print $1}' aws-iam-authenticator.txt

             3) Determine the SHA-256 checksum for your downloaded binary.
 
             openssl sha1 -sha256 aws-iam-authenticator

       C===> Apply execute permissions to the binary.

             chmod +x ./aws-iam-authenticator

       D===> Copy the binary to a folder in your $PATH. We recommend creating a $HOME/bin/aws-iam-authenticator and ensuring that $HOME/bin comes first in your $PATH.

             mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin

       E===> Add $HOME/bin to your PATH environment variable.
         
             echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc

       F===> Test that the aws-iam-authenticator binary works.

             aws-iam-authenticator help


now type command

kubectl get nodes

kubectl create deployment nginx --image nginx

kubectl get pods -A

kubectl expose deployment nginx --port 80 --type=LoadBalancer

kubectl get svc nginx

kubectl logs nginx-name

kubectl describe pod nginx-name

